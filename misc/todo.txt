Todo:
:vencode:
Bug: files containing only video without any audio streams do not produce output. -(temp?) workaround is a "video-only" encode mode (where mkvmerge does not get invoked)
Quality: test on 32-bit OS systems -initial tests indicate everything is normal but need to test more
Rewrite: vEncode.bat should support multi-track audio natively.
Rewrite/Bug: when copying audio, check to see if it's mp4 compatible using ffprobe.exe (increases dependencies)
Bug: mkvmerge does not support merges from wmv containers, so need to convert container to mkv using ffmpeg and work from that one (then delete it when done) -(temp?) workaround is a "video-only" encode mode where mkvmerge does not get invoked
Bug: Figure out why h265 12-bit yuv444p doesn't work. -developer issue
Bug: Files with ! or & in the name error out (cannot parse/fix due to reserved character in CLI) -won't fix

:aencode:
Rewrite/Bug: Should preserve audio metainfo (language) if one was specified for Matroska containers

-Bug fix: Removed yadif from video filters since it was causing distortions (AA) in already progressive video
user now responsible for making sure their content is progressive prior to encoding (since interlacing is icky)
Hopefully this can be added back by using custom avisynth scripts:  vEncode * myFilters.txt


Bug: encodes that use x265 sometimes have incorrect output resolutions when used with ultrafast/yuv422p/yuv444p, esp 480p/1080p yuv444p video. 
The stream's meta info will show the original resolution but actual playback shows the distorted stream.
Partial Workaround: Non-yuv420p ultrafast preset selections now automatically use veryfast instead. 
However certain -yuv444p- videos will still encode incorrectly regardless of preset, especially 480p ones. Always play the output to check!
From:
https://trac.ffmpeg.org/ticket/4980
https://bitbucket.org/multicoreware/x265/issues/197/yuv444p-lossless-roundtrip-for-1080p


When using x265.exe, why does yuv444p produce smaller file sizes than yuv422p, on par with yuv420p?
Code: "In 444, chroma gets twice as much resolution, so halve quality when psy-rd is enabled" p->cbqpOffset +=6;
Reason: "This is primarily a visual quality improvement/psy-rd hack. In 444, since chroma resolution is on par 
with luma, and our eyes arent very sensitive to chroma, we increase the chroma QP so that those bits can be used 
up in luma." -Deepthi Nandakumar from Multicore mid-2014
When using mediainfo this shows up as: cbqpoffs=6 / crqpoffs=6   (instead of cbqpoffs=0 / crqpoffs=0 for yuv420p/yuv422p)
From: https://mailman.videolan.org/pipermail/x265-devel/2014-June/004647.html
"x264 already gives +6 to chroma QP offset in 4:4:4 mode. This is completely arbitrary and probably not an ideal choice." -Dark Shikari 2013
From: http://forum.doom9.org/archive/index.php/t-165415.html
